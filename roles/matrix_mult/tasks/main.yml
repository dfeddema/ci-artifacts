---
- name: Ensure that NFD found nodes with GPU labels
  # label list should be in sync with:
  # https://github.com/NVIDIA/gpu-operator/blob/master/pkg/controller/clusterpolicy/state_manager.go#L26
  shell:
    (   oc get nodes -oname --ignore-not-found=false -l feature.node.kubernetes.io/pci-10de.present
     || oc get nodes -oname --ignore-not-found=false -l feature.node.kubernetes.io/pci-0302_10de.present
     || oc get nodes -oname --ignore-not-found=false -l feature.node.kubernetes.io/pci-0300_10de.present
    ) | grep .

- name: Get the list of nodes with GPUs
  shell:
    oc get nodes
       -lnvidia.com/gpu.present=true
       -o custom-columns=NAME:metadata.name
       --no-headers
    | cut -d. -f1
  register: matrix_mult_gpu_nodes
  failed_when: matrix_mult_gpu_nodes.stdout == ""

- name: Create the entrypoint ConfigMap
  command: oc apply -f "{{ matrix_mult_cm_entrypoint }}"

- name: Create GPU matrix mult Pods
  with_items: "{{ matrix_mult_gpu_nodes.stdout_lines }}"
  shell: |
    set -eo pipefail;
    GPU_NODE_HOSTNAME=$(echo '{{ item }}' );
    echo "Hostname: $GPU_NODE_HOSTNAME";
    oc delete pod/matrix-mult-$GPU_NODE_HOSTNAME -n default --ignore-not-found=true
    cat "{{ matrix_mult_pod }}" \
      | sed "s|{{ '{{' }} gpu_node_hostname {{ '}}' }}|$GPU_NODE_HOSTNAME|" \
      | sed "s|{{ '{{' }} matrix_mult_time {{ '}}' }}|{{ matrix_mult_time }}|" \
      | oc apply -f-

- name: "Let the GPU matrix mult Pods run {{ matrix_mult_time }}seconds"
  command: "sleep {{ matrix_mult_time }}"

- name: Wait for GPU matrix mult Pods to complete
  with_items: "{{ matrix_mult_gpu_nodes.stdout_lines }}"
  command:
    oc get pod/matrix-mult-{{ item }}
       -n default
       -o custom-columns=:.status.phase
       --no-headers
  register: matrix_mult_gpu_wait
  until: matrix_mult_gpu_wait.stdout == "Succeeded" or matrix_mult_gpu_wait.stdout == "Error" or matrix_mult_gpu_wait.stdout == "Failed"
  retries: 10
  delay: 30

- block:
  - name: Ensure that the GPU matrix mult Pods to complete successfully
    with_items: "{{ matrix_mult_gpu_nodes.stdout_lines }}"
    command:
      oc get pod/matrix-mult-{{ item }}
         -n default
         -o custom-columns=:.status.phase
         --no-headers
    register: matrix_mult_gpu_test
    failed_when: matrix_mult_gpu_test.stdout != "Succeeded"

  - name: Ensure that no GPU was faulty
    with_items: "{{ matrix_mult_gpu_nodes.stdout_lines }}"
    shell:
      oc logs pod/matrix-mult-{{ item }} -n default | grep FAULTY
    register: matrix_mult_gpu_test_faulty
    failed_when: matrix_mult_gpu_test_faulty.rc == 0

  always:
  - name: Save the logs of the GPU matrix mult Pods
    shell: oc logs pod/matrix-mult-{{ item }} -n default | grep -o "[^$(printf '\r')]*$"
    with_items: "{{ matrix_mult_gpu_nodes.stdout_lines }}"
    ignore_errors: true

  - name: Save the full logs of the GPU matrix mult Pods
    shell: oc logs pod/matrix-mult-{{ item }} -n default > {{ artifact_extra_logs_dir }}/matrix_mult.{{ item }}.logs
    with_items: "{{ matrix_mult_gpu_nodes.stdout_lines }}"
    ignore_errors: true
    when: artifact_extra_logs_dir | default('', true) | trim != ''

  - name: Cleanup the GPU matrix mult Pods
    command: oc delete pod/matrix-mult-{{ item }} -n default
    with_items: "{{ matrix_mult_gpu_nodes.stdout_lines }}"
    ignore_errors: true

  - name: Delete the entrypoint ConfigMap
    command: oc delete -f "{{ matrix_mult_cm_entrypoint }}"
